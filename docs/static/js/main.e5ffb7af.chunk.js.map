{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","getGifs","category","a","categ","encodeURI","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"sMAIaA,G,KAAc,SAAC,GAAsB,EAApBC,cAAqB,IAAD,EACVC,mBAAS,IADC,+B,uBCDrCC,EAAO,uCAAG,WAASC,GAAT,yBAAAC,EAAA,6DACbC,EAAOC,UAAWH,GACV,mCACRI,EAAI,0CAA0CF,EAAM,qDAHvC,SAIAG,MAAQD,GAJR,cAIbE,EAJa,gBAKGA,EAAKC,OALR,uBAKZC,EALY,EAKZA,KAEDC,EAAMD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAXvB,kBAgBZK,GAhBY,4CAAH,sDCCHO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAErC,OACI,yBAAKa,UAAU,0CAEX,yBAAKC,IAAQd,EAAMe,IAAMN,IACzB,+BAAMA,EAAN,OCLCO,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECCb,SAAEA,GAAe,IAAD,EACdF,mBAAU,CAChCU,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KA4BxC,OAtBAC,qBAAW,WACPzB,EAASC,GACRyB,MAAO,SAAAC,GAGFH,EAAU,CACRf,KAAMkB,EACNL,SAAS,SAKnB,CAAErB,IAUGsB,ED1B2BK,CAAc3B,GAAjCc,EAHsB,EAG7BN,KAAgBa,EAHa,EAGbA,QAiCxB,OACI,oCACA,wBAAIJ,UAAU,oCAAsCjB,GACnDqB,GAAW,uBAAGJ,UAAU,oCAAb,YACR,yBAAKA,UAAU,aAmBPH,EAAOJ,KAAM,SAAAC,GAAG,OACR,kBAAC,EAAD,eACAiB,IAAOjB,EAAIC,IACPD,UEjBjBkB,EA7CQ,WAAM,MAEW/B,mBAAS,CAAC,cAFrB,mBAElBgC,EAFkB,KAENjC,EAFM,KAUzB,OACI,oCACA,6CACA,kBAAC,EAAD,CAAcA,cAAiBA,IAC/B,6BAGA,4BAeIiC,EAAWpB,KAAM,SAAAV,GAAQ,OACrB,kBAAC,EAAD,CACA4B,IAAO5B,EACPA,SAAcA,UCjC9B+B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.e5ffb7af.chunk.js","sourcesContent":["import React,{ useState} from 'react' //raf tab\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    const [inputValue, setInputValue] = useState('');// queda undifined , mejor ''\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n    //manejo del enter en el texto\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault(); //para prevenir el comportamiento por defecto del form\r\n        //console.log('Submit hecho');\r\n        // para no grabar el caso en blanco\r\n        if (inputValue.trim().length >2 ){\r\n              setCategories( cats=> [inputValue,...cats]);\r\n              setInputValue('');\r\n        }\r\n      \r\n        \r\n    }\r\n    return (// el form que sigue es para activar el submit, lo que se manda es el (e)\r\n        <form onSubmit= { handleSubmit} >\r\n        {/* <h1>{inputValue }</h1> */}\r\n            <input \r\n               type=\"text\"\r\n               value={ inputValue}\r\n               onChange= {handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n   }\r\n   \r\n","//los helpers no renderizan son complementos como todos\r\n\r\n\r\nexport const getGifs = async  ( category ) => {\r\n    const categ= encodeURI( category);\r\n    const app_key='AiK7TVLhlLp83ROFHwHdxNvo1B2LICG4'\r\n    const url='https://api.giphy.com/v1/gifs/search?q='+categ+'&limit=10&api_key='+app_key;\r\n    const resp = await fetch ( url );\r\n    const {data } = await resp.json();\r\n\r\n    const gifs =data.map( img =>{// este arreglo es para extrar del data lo que me importa\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url// es ? es para asegurarnos que sólo interesa si vienen datos\r\n        }\r\n    })\r\n    // console.log(gifs);\r\n    // setImages( gifs);\r\n    return gifs ;\r\n    //esto retorna una premesa (async)\r\n}\r\n\r\n\r\n","import React from 'react'\r\n \r\n//export const GifGridItem = ( props ) => {\r\n    //recibiendo cada una de las propiedades puede verse más claro\r\n    export const GifGridItem = ( {title, url }) => {\r\n    //console.log ({id, title, url });\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            {/* { img.title } */}\r\n            <img src = { url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //const {data , loading }=useFetchGifs();\r\n    const { data : images  ,loading }=useFetchGifs( category );\r\n    //console.log( loading);\r\n    //const [count, setCount] = useState(0);\r\n    \r\n    // const [images,setImages] = useState([]);\r\n    // useEffect(() => {\r\n    //     //getGifs();\r\n    //     getGifs(category)\r\n    //     //.then (imgs => setImages( imgs));\r\n    //     //o como sigue\r\n    //     .then ( setImages);\r\n    // },[ category ]) // esto hace que ejecute getGifs se ejecuta una sóla vez: la primera vez []\r\n    // cuando dice category se ejecuta cuando esta cambia\r\n\r\n    //se movió lo que sigue al helpers getGifs\r\n    // const getGifs = async  ( ) => {\r\n    //     const categ= encodeURI( category);\r\n    //     const app_key='AiK7TVLhlLp83ROFHwHdxNvo1B2LICG4'\r\n    //     const url='https://api.giphy.com/v1/gifs/search?q='+categ+'&limit=10&api_key='+app_key;\r\n    //     const resp = await fetch ( url );\r\n    //     const {data } = await resp.json();\r\n\r\n    //     const gifs =data.map( img =>{// este arreglo es para extrar del data lo que me importa\r\n    //         return {\r\n    //             id: img.id,\r\n    //             title: img.title,\r\n    //             url: img.images?.downsized_medium.url// es ? es para asegurarnos que sólo interesa si vienen datos\r\n    //         }\r\n    //     })\r\n    //     console.log(gifs);\r\n    //     setImages( gifs);\r\n    // }\r\n    // // getGifs();\r\n    return (\r\n        <> \r\n        <h3 className=\"animate__animated animate__fadIn\" >{ category  }</h3>\r\n        {loading && <p className=\"animate__animated animate__flash\"  >Cargando</p>}\r\n            <div className=\"card-grid\">\r\n                {/* <h3 >{ category }</h3> */}\r\n                {/* {botón para mostrar que lee reiteradas veces-cada vez que se apriete el botón} */}\r\n                {/* <h3> {count}</h3>\r\n                <button onClick = { () => setCount (count +1 )}></button> */}\r\n                {/* <ol> */}\r\n                    {/* <li>item </li>\r\n                {\r\n                    // images.map ( img => (\r\n                    //     <li key ={ img.id } > {img.title }</li>\r\n                    // ))\r\n                    // o desestructurado\r\n                    images.map ( ({id,title} ) => (\r\n                            <li key ={ id } > {title }</li>\r\n                    ))\r\n                } */}\r\n                {/* </ol> */}\r\n                {/* sacando lo anterior al componente GifGridItem */}\r\n                {\r\n                    images.map ( img => (\r\n                            <GifGridItem\r\n                            key= { img.id }\r\n                            {...img } \r\n                            />\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n","//todo hook empieza con use\r\n// los hook son funciones idem components\r\n// si no requiere JSX no requiere react\r\nimport { useState , useEffect } from 'react';\r\nimport {getGifs} from '../helpers/getGifs' ;\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState( {\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n        getGifs( category )  \r\n        .then ( imgs  => {\r\n           //setTimeout( () =>{\r\n               //console.log(imgs); \r\n              setState( {\r\n                data: imgs,\r\n                loading: false     \r\n               });     \r\n            //},3000)\r\n\r\n       })\r\n    },[ category ]) // esto hace que ejecute getGifs se ejecuta una sóla vez: la primera vez []\r\n    // o cuando dice category se ejecuta cuando esta cambia\r\n    \r\n    //probando el 'cargando...'\r\n    // setTimeout ( ()=> {\r\n    // setState( {\r\n    //     data: [1,2,3,4,5,6],\r\n    //     loading: false\r\n    // })\r\n    // },3000 ) ;//se ejecutará a los 3 seg del otro\r\n    return state; // {data:[], loading: true}\r\n}\r\n\r\n","import React,{useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nconst  GiftExpertApp = () => {\r\n    //const categories =['One Punch','Samurai X','Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    //const handleAdd = () =>{\r\n         //categories.push ('HunterXHunter');\r\n         //setCategories(['HunterXHunter',...categories]);\r\n         //que también se puede escribir como call back\r\n         //setCategories( cats=> ['HunterXHunter',...cats]);\r\n\r\n    //}\r\n    return (\r\n        <>\r\n        <h2>GiftExpertApp</h2>\r\n        <AddCategory  setCategories ={ setCategories } /> \r\n        <hr />\r\n\r\n        {/* <button onClick ={handleAdd}>Agregar</button> */}\r\n        <ol>\r\n        {\r\n          //categories.map ((category,i) => { // map recibe 2 arg\r\n              //console.log (' Hola ');\r\n              //return <li key = {i} > Hola</li> // no combiene usar el i como index\r\n        //   categories.map (category => {\r\n        //   return <li key = { category } > {category}</li>\r\n        //   })\r\n        // y escrita en una línea sería, el paréntesis despues de la flecha es opcional\r\n            // categories.map (category => (\r\n            // <li key = { category } > {category}</li>\r\n            // ))\r\n            //usando el componente \r\n        }\r\n          {\r\n            categories.map ( category => (\r\n                <GifGrid \r\n                key ={ category}\r\n                category  = { category }\r\n                /> \r\n            ))\r\n            }  \r\n\r\n         </ol>\r\n         </>\r\n   )\r\n}\r\n\r\nexport default GiftExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GiftExpertApp from './GifExpertApp';\n\n\n\nReactDOM.render(\n  \n    <GiftExpertApp  />,\n  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}